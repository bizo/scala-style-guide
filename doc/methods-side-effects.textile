---
layout: default
title: Methods and Side Effects
---

h2. One-line methods: simple expressions

One-line methods with simple expressions do not require braces:

{% highlight scala %}
  // preferred
  def hasNext: Boolean = (i < end)
{% endhighlight %}

{% highlight scala %}
  // hmmm-kay
  def hasNext: Boolean = {
    i < end
  }
{% endhighlight %}

h2. Side-effecting methods

One-line methods with side-effects should use braces (instead of using equal),

{% highlight scala %}
  // preferred
  def next() {
    i += 1
  }
{% endhighlight %}

{% highlight scala %}
  // hmmm-kay
  def next() { i += 1 }
{% endhighlight %}

{% highlight scala %}
  // wrong: no parenthesis indicating effect
  def next { i += 1 }
{% endhighlight %}

{% highlight scala %}
  // wrong: equal sign shouldn't be used for Unit-returning methods
  def next() = { i += 1 }
{% endhighlight %}

{% highlight scala %}
  // wrong: equal sign shouldn't be used for Unit-returning methods
  def next() = {
    i += 1
  }
{% endhighlight %}

h2. Return types

Public and protected methods should explicitly declare their return type:

{% highlight scala %}
  // good
  def compute: Result = {
    ...
  }
{% endhighlight %}

{% highlight scala %}
  // wrong: no explicit result type
  def compute = {
    ...
  }
{% endhighlight %}

This practice avoids 1) having class users and inheritors having to guess the actual return type and 2) having the return type inadvertently change and thefore avoid unexpected incompatible class changes.

The rule also applies to methods returning Unit.

{% highlight scala %}
  // hmmmm, questionable
  def doSomething {
    ...
  }

  // preferred
  def doSomething: Unit = {
  }
{% endhighlight %}

And applies to abstract methods, e.g., in traits or abstract classes,

{% highlight scala %}
// good
trait Foo {
  def compute: Result
  def doSomething: Unit
}
{% endhighlight %}

{% highlight scala %}
// wrong
trait Foo {
  def compute: Result
  def doSomething()  // missing "Unit"
}
{% endhighlight %}


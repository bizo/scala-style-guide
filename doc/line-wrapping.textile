---
layout: default
title: Line Wrapping
---

h2. Line Length and Indentation

The recommended maximum line length is 120 characters.

Indentation for wrapped lines is 4 spaces.

h2. Wrapping expression in parenthesis

There are two ways to wrap lines safely in Scala. It's possible to leave a trailing operator,

{% highlight scala %}
// wrong
val result = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 +
    24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33
{% endhighlight %}

or it's possible to wrap everything in a set of parenthesis without need for trailing operators:

{% highlight scala %}
// right
val result = (
    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25
        + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33
)
{% endhighlight %}

We prefer wrapping in a set of parenthesis and starting new lines with operators because it's easier to mentally connect operations and arguments (see below).

h2. Single expression

{% highlight scala %}
  // wrong
  private val socketTimeout = (Option(config.getProperty("socketTimeout")) map (_.toInt)
    getOrElse defaultSocketTimeout)
{% endhighlight %}

{% highlight scala %}
  // right
  private val socketTimeout = (
      Option(config.getProperty("socketTimeout"))
          map (_.toInt)
          getOrElse defaultSocketTimeout
  )
{% endhighlight %}

As you can see above, it's a good idea to wrap for each operator-and-arguments pair.

h2. Class definition

{% highlight scala %}
// wrong
class SugarcubeServer(val catalog: Catalog, val databases: Seq[String],
  val config: Properties = new Properties()) extends ThriftServer with JettyServer {
  ...
}
{% endhighlight %}

{% highlight scala %}
// right
class SugarcubeServer(
    val catalog: Catalog,
    val databases: Seq[String],
    val config: Properties = new Properties()
) extends ThriftServer with JettyServer {
  ...
}
{% endhighlight %}

h2. Single expression method body

{% highlight scala %}
  // preferred
  def fib(n: Int, b: Int, a: Int): Int = n match {
    case 0 => a
    case _ => fib(n - 1, a + b, b)
  }
{% endhighlight %}

{% highlight scala %}
  // hmmm-kay
  def fib(n: Int, b: Int, a: Int): Int = {
    n match {
      case 0 => a
      case _ => fibonacci(n - 1, a + b, b)
    }
  }
{% endhighlight %}

